{"version":3,"sources":["helpers/nameMonts.js","helpers/nameDays.js","Components/Months.js","App.js","serviceWorker.js","index.js"],"names":["nameMonths","nameDays","Months","props","rows","year","month","current","Date","diff","index","getDay","table","tr","k","i","j","push","react_default","a","createElement","th","map","day","nameMonth","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","nextMonth","setState","prevState","date","getFullYear","getMonth","prevMonth","currentlyMonth","state","className","onClick","Components_Months","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAeeA,eAfK,CAChB,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,aCFWC,EAVE,CACb,KACA,KACA,KACA,KACA,KACA,KACA,MCkCWC,MApCf,SAAiBC,GAAM,IAMfC,EALCC,EAAeF,EAAfE,KAAMC,EAASH,EAATG,MACPC,EAAU,IAAIC,KAAKH,EAAMC,GAEzBG,GADU,IAAID,KAAKH,EAAMC,EAAQ,GAClBC,GAAR,MACPG,GAASH,EAAQI,SAAS,GAAK,EAEvBP,EAAZM,EAAQ,EAAW,EAAW,EAO9B,IANA,IAGIE,EAAQ,GACZC,EAAK,CAAC,EAAE,GACRC,EAAI,EAAIJ,EACAK,EAAI,EAAGA,EAAIX,EAAMW,IAAI,CACzBF,EAAK,GACL,IAAI,IAAIG,EAAI,EAAGA,EARN,EAQgBA,IACrBH,EAAGI,KAAKC,EAAAC,EAAAC,cAAA,UAAKN,EAAI,GAAKA,GAAKL,EAAOK,EAAI,KACtCA,IAEJF,EAAMK,KAAKC,EAAAC,EAAAC,cAAA,UAAKP,IAGpB,IAAMQ,EAAKpB,EAASqB,IAAI,SAAAC,GAAG,OACvBL,EAAAC,EAAAC,cAAA,UAAKG,KAGT,OACIL,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,eAAUI,EAAUlB,GAAS,IAAKD,GACjCgB,EACAT,ICoCEa,cAlEb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAOFI,UAAY,WACVP,EAAKQ,SAAS,SAAAC,GACZ,IAAM9B,EAAQ8B,EAAUC,KAAKC,cACvB/B,EAAQ6B,EAAUC,KAAKE,WAE7B,MAAM,CACJF,KAFY,IAAI5B,KAAKH,EAAMC,EAAQ,OAZ5BoB,EAmBba,UAAY,WACVb,EAAKQ,SAAS,SAAAC,GACZ,IAAM9B,EAAQ8B,EAAUC,KAAKC,cACvB/B,EAAQ6B,EAAUC,KAAKE,WAE7B,MAAM,CACJF,KAFY,IAAI5B,KAAKH,EAAMC,EAAQ,OAvB5BoB,EA8Bbc,eAAiB,WACfd,EAAKQ,SAAS,WAEZ,MAAM,CACJE,KAFc,IAAI5B,SA7BtBkB,EAAKe,MAAQ,CACXL,KAAM,IAAI5B,MAJDkB,wEAyCL,IAGDU,EAAQP,KAAKY,MAAbL,KACC/B,EAAO+B,EAAKC,cACZ/B,EAAQ8B,EAAKE,WAEnB,OACEpB,EAAAC,EAAAC,cAAA,OAAKsB,UAAU,OACbxB,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,OAAKsB,UAAU,WACbxB,EAAAC,EAAAC,cAAA,UAAQuB,QAASd,KAAKU,WAAtB,QACArB,EAAAC,EAAAC,cAAA,UAAQuB,QAASd,KAAKW,gBAAtB,aACAtB,EAAAC,EAAAC,cAAA,UAAQuB,QAASd,KAAKI,WAAtB,SAEFf,EAAAC,EAAAC,cAACwB,EAAD,CACAvC,KAAMA,EACNC,MAAOA,YA3DGuC,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.072b544b.chunk.js","sourcesContent":["const nameMonths  = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\", \n    \"July\", \n    \"August\", \n    \"September\", \n    \"October\", \n    \"November\",\n    \"December\"\n]\n\nexport default nameMonths;","const nameDays = [\n    \"MO\",\n    \"TU\",\n    \"WE\",\n    \"TH\",\n    \"FR\",\n    \"SA\",\n    \"SU\"\n]\n\nexport default nameDays;","import React from 'react';\nimport '../css/Month.css';\nimport nameMonth from '../helpers/nameMonts';\nimport nameDays from '../helpers/nameDays';\n\nfunction Months (props){\n    let {year, month} = props;\n    let current = new Date(year, month);\n    let next    = new Date(year, month + 1);\n    let diff = (next - current)/(1000 * 3600 * 24);\n    let index = (current.getDay()+6) % 7;\n    let rows;\n    index > 5 ? rows = 6 : rows = 5;\n    const COLS = 7;\n    \n\n    let table = [],\n    tr = [1,2],\n    k = 1 - index;\n    for(let i = 0; i < rows; i++){\n        tr = [];\n        for(let j = 0; j < COLS; j++){\n            tr.push(<td>{k > 0 && k <= diff ? k : ''}</td>);\n            k++;\n        }\n        table.push(<tr>{tr}</tr>)\n    }\n\n    const th = nameDays.map(day =>(\n        <th>{day}</th>\n    ))\n\n    return(\n        <table>\n            <caption>{nameMonth[month] + ' '}{year}</caption>\n            {th}\n            {table}\n        </table>\n    )\n}\n\nexport default Months;","import React from 'react';\nimport './css/App.css';\nimport Months from './Components/Months';\n\n\nclass App extends React.Component {\n  constructor(){\n    super()\n    \n    this.state = {\n      date: new Date()\n    }\n  }\n\n  nextMonth = () => {\n    this.setState(prevState =>{\n      const year  = prevState.date.getFullYear();\n      const month = prevState.date.getMonth();\n      let next    = new Date(year, month + 1);\n      return{\n        date: next\n      }\n    })\n  }\n\n  prevMonth = () => {\n    this.setState(prevState =>{\n      const year  = prevState.date.getFullYear();\n      const month = prevState.date.getMonth();\n      let prev    = new Date(year, month - 1);\n      return{\n        date: prev\n      }\n    })\n  }\n\n  currentlyMonth = () => {\n    this.setState(() =>{\n      let currently = new Date();\n      return{\n        date: currently\n      }\n    })\n  }\n\n\n\n  render(){\n \n    \n    let {date} = this.state;\n    const year = date.getFullYear();\n    const month = date.getMonth();\n\n    return (\n      <div className=\"App\">\n        <h1>Calendar</h1>\n        <div className='buttons'>\n          <button onClick={this.prevMonth}>Prev</button>\n          <button onClick={this.currentlyMonth}>Currently</button>\n          <button onClick={this.nextMonth}>Next</button>\n        </div>\n        <Months \n        year={year}\n        month={month}\n        />\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}